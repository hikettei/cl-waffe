
@begin(section)
@title(Reference for cl-waffe)
@begin(section)

@title(Package: cl-waffe)
This package is under development and APIs can be changed without notice.
@end(section)

@begin(section)
@title(Sections)

@begin(deflist)
@def(Four Arithmetic Operations)
@begin(term)
@link[uri="./operators.html#!add"](!add) Applying two tensors +


@link[uri="./operators.html#!sub"](!sub) Applying two tensors -


@link[uri="./operators.html#!mul"](!mul) Applying two tensors *


@link[uri="./operators.html#!div"](!div)   Applying two tensors /
@end(term)

@def(Sum up and obtain a average)
@begin(term)
@link[uri="./operators.html#!sum"](!sum)    Sum up the given tensor in specified dims, and if needed, repeat it.


@link[uri="./operators.html#!mean"](!mean) Find the average of a specified dimension.
@end(term)

@def(Multiplying matrices)
@begin(term)
@link[uri="./operators.html#!dot"](!dot)        Returns the dot product of two tensors which are 1D.


@link[uri="./operators.html#!matmul"](!matmul)  Multiplying matrices x and y. The returned value depends on the dimension of x and y.


@link[uri="./operators.html#!einsum"](!einsum)
@end(term)

@def(Shaping)
@begin(term)
@link[uri="./operators.html#!squeeze"](!squeeze) Returns a new tensor with a dimension of size one removed at the specified position.


@link[uri="./operators.html#!unsqueeze"](!unsqueeze) Returns a new tensor with a dimension of size one inserted at the specified position.


@link[uri="./operators.html#!transpose"](!transpose) transpose a tensor for !matmul


@link[uri="./operators.html#!transpose1"](!transpose1) transpose a tensor but doens't produce an lazy-evaluated tensor.


@link[uri="./operators.html#!reshape"](!reshape)


@link[uri="./operators.html#!repeats"](!repeats)


@link[uri="./operators.html#!flatten"](!flatten)


@link[uri="./operators.html#!ravel"](!ravel)


@link[uri="./operators.html#!shape"](!shape)


@link[uri="./operators.html#!dims"](!dims)


@link[uri="./operators.html#!size"](!size) 
@end(term)

@def(Trigonometric Functions)
@begin(term)
@link[uri="./operators.html#!sin"](!sin)


@link[uri="./operators.html#!cos"](!cos)


@link[uri="./operators.html#!tan"](!tan)


@link[uri="./operators.html#!asin"](!asin)


@link[uri="./operators.html#!acos"](!acos)


@link[uri="./operators.html#!atan"](!atan)


@link[uri="./operators.html#!sinh"](!sinh)


@link[uri="./operators.html#!cosh"](!cosh)


@link[uri="./operators.html#!tanh"](!tanh)


@link[uri="./operators.html#!asinh"](!asinh)


@link[uri="./operators.html#!acosh"](!acosh)


@link[uri="./operators.html#!atanh"](!atanh)
@end(term)

@def(Math Functions)
@begin(term)
@link[uri="./operators.html#!abs"](!abs)


@link[uri="./operators.html#!log"](!log)


@link[uri="./operators.html#!exp"](!exp)


@link[uri="./operators.html#!pow"](!pow)


@link[uri="./operators.html#!sqrt"](!sqrt)
@end(term)

@def(Activations)
@begin(term)
@link[uri="./operators.html#!tanh"](!tanh)


@link[uri="./operators.html#!sigmoid"](!sigmoid)


@link[uri="./operators.html#!relu"](!relu)


@link[uri="./operators.html#!gelu"](!gelu)


@link[uri="./operators.html#!leakey-relu"](!leakey-relu)


@link[uri="./operators.html#!swish"](!swish)


@link[uri="./operators.html#!softmax"](!softmax)
@end(term)


@def(Handling Multidimensional Tensors)
@begin(term)
@link[uri="./operators.html#!aref"](!aref)


@link[uri="./operators.html#!dotensors"](!dotensors)


@link[uri="./operators.html#!set-batch"](!set-batch)


@link[uri="./operators.html#!where"](!where)


@link[uri="./operators.html#!index"](!index)
@end(term)


@def(Initialize A Tensor With Specified Elements)
@begin(term)
@link[uri="./operators.html#!zeros"](!zeros)


@link[uri="./operators.html#!zeros"](!ones)


@link[uri="./operators.html#!zeros"](!fill) fill a tensor with specified value


@link[uri="./operators.html#!zeros"](!zeros-like)


@link[uri="./operators.html#!zeros"](!ones-like)


@link[uri="./operators.html#!zeros"](!full-like)


@link[uri="./operators.html#!arange"](!arange)


@link[uri="./operators.html#!init-with"](!init-with)
@end(term)


@def(Random)
@begin(term)
@link[uri="./operators.html#!random"](!random)


@link[uri="./operators.html#!random-with"](!random-with)


@link[uri="./operators.html#!normal"](!normal)


@link[uri="./operators.html#!randn"](!randn)

@end(term)


@def(Samplign Probability Distributions)
@begin(term)
@link[uri="./operators.html#!randn"](!randn)


@link[uri="./operators.html#!beta"](!beta)


@link[uri="./operators.html#!gamma"](!gamma)


@link[uri="./operators.html#!chisquare"](!chisquare)


@link[uri="./operators.html#!bernoulli"](!bernoulli)
@end(term)
@end(deflist)


@end(section)

@begin(section)
@title(Defining objects)

@cl:with-package[name="cl-waffe"](

@cl:doc(macro defmodel)
@cl:doc(macro defnode)
@cl:doc(macro defoptimizer)

@cl:doc(macro defdataset)
@cl:doc(function get-dataset)
@cl:doc(function get-dataset-length)

@cl:doc(macro deftrainer)
@cl:doc(function step-model)
@cl:doc(function predict)
)

@end(section)

@begin(section)
@title(Documents in cl-waffe's object)
@cl:with-package[name="cl-waffe"](
@cl:doc(macro with-usage)
@cl:doc(function build-docstring)
)
@end(section)

@begin(section)
@title(Tensor)

@begin(section)
@title(Basic of Tensor and backward)

@begin(section)
@title(Initialize Tensor)
Choose your data structure as follows:

@begin(deflist)
@term(use grads)
@def(=> Initialize with (tensor ) or (parameter ))
@term(don't use grads)
@def(=> Initialize with (const ))
@end(deflist)

@begin(section)
@title(Parameters)

@begin[lang=lisp](code)
(tensor 0) ; => #Parameter{0 :device :MGL :backward NIL}
(parameter (!zeros '(10 10)))
; => #Parameter{((0.0 0.0 ~ 0.0 0.0)            
;                         ...
;            (0.0 0.0 ~ 0.0 0.0)) :mgl t :shape (10 10) :device :MGL :backward NIL}

(setq mat (make-mat '(10 10)))
(tensor mat) ;the save as above
@end[lang=lisp](code)

@end(section)

@begin(section)
@title(Constants)

@begin[lang=lisp](code)
(const 0) ; => #Const(0)
(!zeros '(10 10)) ; =>
;#Const(((0.0 0.0 ~ 0.0 0.0)        
;                 ...
;        (0.0 0.0 ~ 0.0 0.0)) :mgl t :shape (10 10))

(setq mat (make-mat '(10 10)))
(const mat) ; the same as above
@end[lang=lisp](code)

@end(section)

@begin(section)
@title(Tensor vs Const)
The differences between Tensor and Const are as follows
@begin(enum)
@item(Calling (backward out) function, and (grad tensor) get new grads-value while (grad const) doesn't)
@item(Calling optimizers will modify the model's parameters where param is a tensor, while const isn't.)
@end(enum)
@end(section)
@end(section)

In order to make constants an parameter, use this:

@cl:with-package[name="cl-waffe"](
@cl:doc(macro parameter)
@cl:doc(macro detach)
)

Here's structure of waffetensor

@cl:with-package[name="cl-waffe"](
@cl:doc(struct WaffeTensor)
)

@cl:with-package[name="cl-waffe"](
@cl:doc(function backward)
@cl:doc(variable *no-grad*)
@cl:doc(macro with-no-grad)
)

@end(section)
@begin(section)
@title(Forward Nodes)
@cl:with-package[name="cl-waffe"](
@cl:doc(function call)
@cl:doc(macro with-calling-layers)
)
@end(section)
@begin(section)
@title(Exported Parameters)

@cl:with-package[name="cl-waffe"](
@cl:doc(variable *default-backend*)

Configs when printing tensor.

@cl:doc(variable *print-char-max-len*)
@cl:doc(variable *print-arr-max-size*)
@cl:doc(variable *print-mat-max-size*)
)

@end(section)

@begin(section)
@title(Types)

@cl:with-package[name="cl-waffe"](
@cl:doc(type WaffeTensorContentType)
@cl:doc(type WaffeSupportedDataType)
)
@end(section)

@begin(section)
@title(Accessor)

@cl:with-package[name="cl-waffe"](
@cl:doc(function data)
@cl:doc(macro grad)
)


@end(section)
@end(section)

@begin(section)
@title(Initialize Constants)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !zeros)
@cl:doc(function !ones)
@cl:doc(function !fill)
@cl:doc(macro !arange)
@cl:doc(function !random)
@cl:doc(function !random-with)
@cl:doc(function !normal)
@cl:doc(macro !randn)
@cl:doc(function !beta)
@cl:doc(function !gamma)
@cl:doc(function !chisquare)
@cl:doc(function !bernoulli)
@cl:doc(function !zeros-like)
@cl:doc(function !ones-like)
@cl:doc(function !full-like)
)

@end(section)


@begin(section)
@title(Cut and Displace Tensor)
@cl:with-package[name="cl-waffe"](
@cl:doc(function !set-batch)
@cl:doc(function !reset-batch)

@cl:doc(function !aref)
)
@end(section)

@begin(section)
@title(Shaping)
@cl:with-package[name="cl-waffe"](
@cl:doc(function !shape)
@cl:doc(function !dims)
@cl:doc(function !size)
)
@end(section)

@begin(section)
@title(Operations)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !add)
@cl:doc(function !sub)
@cl:doc(function !mul)
@cl:doc(function !div)

@cl:doc(function !matmul)
@cl:doc(function !dot)

@cl:doc(function !pow)
@cl:doc(function !sqrt)
@cl:doc(function !log)
@cl:doc(function !exp)

@cl:doc(function !sum)
@cl:doc(function !mean)

@cl:doc(function !modify)


@cl:doc(function !squeeze)
@cl:doc(function !unsqueeze)
@cl:doc(function !repeats)
@cl:doc(function !reshape)
@cl:doc(function !transpose)
@cl:doc(function !aref)

@cl:doc(function !modify)
)

@end(section)

@begin(section)
@title(Math Functions)
@cl:with-package[name="cl-waffe"](
@cl:doc(function !tanh)
)
@end(section)

@begin(section)
@title(Activations)
@cl:with-package[name="cl-waffe"](
@cl:doc(function !relu)
@cl:doc(function !sigmoid)
@cl:doc(function !tanh)
@cl:doc(function !softmax)
)
@end(section)

@begin(section)
@title(Utils for defnode)
These features for advanced.

@cl:with-package[name="cl-waffe"](
@cl:doc(macro warranty)
@cl:doc(macro with-kernel-case)
@cl:doc(macro call-and-dispatch-kernel)
)
@end(section)

@begin(section)
@title(Train And Valid)
@cl:with-package[name="cl-waffe"](
@cl:doc(function train)
@cl:doc(function valid)
)
@end(section)

@begin(section)
@title(Datasets)
@cl:with-package[name="cl-waffe"](
@cl:doc(struct Waffedataset)
)
@end(section)

@end(section)