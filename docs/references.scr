
@begin(section)
@title(cl-waffe)
@begin(section)

@title(Package: cl-waffe)
This package is under development and APIs can be changed without notice.

There's
@begin(enum)
@item(WaffeTensor And APIs for it)
@item(Macros for defining objects)
@item(Train Function)
@item(Basic Tensor Operations)
@end(enum)
@end(section)

@begin(section)
@title(Defining objects)

@cl:with-package[name="cl-waffe"](

@cl:doc(macro defmodel)
@cl:doc(macro defnode)
@cl:doc(macro defoptimizer)

@cl:doc(macro defdataset)
@cl:doc(function get-dataset)
@cl:doc(function get-dataset-length)

@cl:doc(macro deftrainer)
@cl:doc(function step-model)
@cl:doc(function predict)
)

@end(section)

@begin(section)
@title(Documents in cl-waffe's object)
@cl:with-package[name="cl-waffe"](
@cl:doc(macro with-usage)
@cl:doc(function build-docstring)
)
@end(section)

@begin(section)
@title(Tensor)

@begin(section)
@title(Basic of Tensor and backward)

Struct WaffeTensor

From Const To Tensor

@cl:with-package[name="cl-waffe"](
@cl:doc(macro parameter)
@cl:doc(macro detach)
)

@cl:with-package[name="cl-waffe"](
@cl:doc(function backward)
@cl:doc(variable *no-grad*)
@cl:doc(macro with-no-grad)
)

@end(section)
@begin(section)
@title(Forward Nodes)
@cl:with-package[name="cl-waffe"](
@cl:doc(function call)
@cl:doc(macro with-calling-layers)
)
@end(section)
@begin(section)
@title(Exported Parameters)

@cl:with-package[name="cl-waffe"](
@cl:doc(variable *default-backend*)

Configs when printing tensor.

@cl:doc(variable *print-char-max-len*)
@cl:doc(variable *print-arr-max-size*)
@cl:doc(variable *print-mat-max-size*)
)

@end(section)

@begin(section)
@title(Types)

@cl:with-package[name="cl-waffe"](
@cl:doc(type WaffeTensorContentType)
@cl:doc(type WaffeSupportedDataType)
)
@end(section)

@begin(section)
@title(Accessor)

@cl:with-package[name="cl-waffe"](
@cl:doc(function data)
@cl:doc(macro grad)
)


@end(section)
@end(section)

@begin(section)
@title(Initialize Constants)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !zeros)
@cl:doc(function !ones)
@cl:doc(function !fill)
@cl:doc(macro !arange)
@cl:doc(function !random)
@cl:doc(function !random-with)
@cl:doc(function !normal)
@cl:doc(macro !randn)
@cl:doc(function !beta)
@cl:doc(function !gamma)
@cl:doc(function !chisquare)
@cl:doc(function !bernoulli)
@cl:doc(function !zeros-like)
@cl:doc(function !ones-like)
@cl:doc(function !full-like)
)

@end(section)

@begin(section)
@title(Cut and Displace Tensor)
@cl:with-package[name="cl-waffe"](
@cl:doc(function !set-batch)
@cl:doc(function !reset-batch)

@cl:doc(function !aref)
)
@end(section)

@begin(section)
@title(Shaping)
@cl:with-package[name="cl-waffe"](
@cl:doc(function !shape)
@cl:doc(function !dims)
@cl:doc(function !size)
)
@end(section)

@begin(section)
@title(Operations)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !add)
@cl:doc(function !sub)
@cl:doc(function !mul)
@cl:doc(function !div)

@cl:doc(function !matmul)
@cl:doc(function !dot)

@cl:doc(function !pow)
@cl:doc(function !sqrt)
@cl:doc(function !log)
@cl:doc(function !exp)

@cl:doc(function !sum)
@cl:doc(function !mean)

@cl:doc(function !modify)


@cl:doc(function !squeeze)
@cl:doc(function !unsqueeze)
@cl:doc(function !repeats)
@cl:doc(function !reshape)
@cl:doc(function !transpose)
@cl:doc(function !aref)

@cl:doc(function !modify)
)

@end(section)

@begin(section)
@title(Math Functions)
@cl:with-package[name="cl-waffe"](
@cl:doc(function !tanh)
)
@end(section)

@begin(section)
@title(Activations)
@cl:with-package[name="cl-waffe"](
@cl:doc(function !relu)
@cl:doc(function !sigmoid)
@cl:doc(function !tanh)
@cl:doc(function !softmax)
)
@end(section)

@begin(section)
@title(Utils for defnode)
These features for advanced.

@cl:with-package[name="cl-waffe"](
@cl:doc(macro warranty)
@cl:doc(macro with-kernel-case)
@cl:doc(macro call-and-dispatch-kernel)
)
@end(section)

@begin(section)
@title(Train And Valid)
@cl:with-package[name="cl-waffe"](
@cl:doc(function train)
@cl:doc(function valid)
)
@end(section)

@begin(section)
@title(Datasets)
@cl:with-package[name="cl-waffe"](
@cl:doc(struct Waffedataset)
)
@end(section)

@end(section)