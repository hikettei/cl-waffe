@begin(section)
@title(Overview)

@begin(section)
@title(Welcome to cl-waffe!)

@image[src=cl-waffe-logo.png]()

@b(This package is in development.)

cl-waffe is a deep learning framework for Common Lisp, which is aimed to:

@begin(enum)
@item(Simple And Fast.)
@item(Integrate Environments.)
@item(Extensible For Users.)
@end(enum)
@end(section)

@begin(section)
@title(Problems)
тЪая╕ПThis framework is under development and contains many bugs.

тЪая╕П Also, APIs can be changed without notice.

тЪая╕П Please note that @b(THIS IS NOT YET PRACTICAL.)

тЪая╕ПThe Document also contains information on functions that have not yet been implemented or validated.

Having not gpus, I can't test my framework on cuda ><. CUDA supporting are a little further along.
@end(section)

@begin(section)
@title(Sections)
@begin(deflist)
@def(Learn cl-waffe)
@begin(term)
@link[uri="./mnist-tutorial.html"](Tutorial With MNIST) Let's get started with MNIST


@link[uri="./extend-library.html"](Extend cl-waffe As you wish) cl-waffe's features are exported to users, in order to extend everything.


@link[uri="./using-tensor.html"](The usage of cl-waffe tensor) The basic usage of cl-waffe's tensor, and JIT Compiler etc...
@end(term)

@def(Documentation for each packages.)
@begin(term)
@link[uri="./cl-waffe.html"](cl-waffe)


@link[uri="./cl-waffe.nn.html"](cl-waffe.nn)


@link[uri="./cl-waffe.optimizers.html"](cl-waffe.optimizers)


@link[uri="./cl-waffe.io.html"](cl-waffe.io)


@link[uri="./cl-waffe.caches.html"](cl-waffe.caches)

@end(term)

@def(Storeroom)
@begin(term)

@link[uri="./operators.html"](Tensor Operators)


@link[uri="./neural-networks.html"](Neural Networks)


@link[uri="./optimizers.html"](Optimizers)


@end(term)

@end(deflist)
@end(section)

@begin(section)
@title(Pull Requests)

Bug reports and Pull requests are welcome at @link[uri="https://github.com/hikettei/cl-waffe"](Original Repository)


To be honest, English is not my cup of tea, so please let me know if there are any errors in my English.

@end(section)
@begin(section)
@title(Contacts)

My Discord: @link[uri="https://discordapp.com/users/350796206449885186"](ruliaЁЯМЩ#5298)

My Twitter: @link[uri="https://twitter.com/ichndm"](@ichndm)

@end(section)
@begin(section)
@title(LLA Setting)

@b(If BLAS is already set up, skip this.)

cl-waffe depends on @link[uri="https://github.com/tpapp/lla"](LLA) and you have to set up configurations.

Write the following code (path should be changed depending on the environment.) to
your startup script: (e.g.: @c(~/.sbclrc),  @c(~/.roswell/init.lisp) and so on.)

@begin[lang=lisp](code)
(defvar *lla-configuration*
  '(:libraries ("/usr/local/opt/openblas/lib/libblas.dylib")))
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(When Memory Exhausted)

It is better to run this command in advance, since training a model requires a lot of memory.


This is because the cl-waffe data loader puts all the training data in memory and the recalculation of gradients has not yet been implemented.


I'll implement it when I have time...


@begin[lang=shell](code)
$ ros config set dynamic-space-size 4gb
@end[lang=shell](code)

For example, If you're using SBCL with SLIME...

Please add:

@begin[lang=lisp](code)
(setq slime-lisp-implementations '(("sbcl" ("sbcl" "--dynamic-space-size" "4096"))))
@end[lang=lisp](code)

@end(section)
@end(section)