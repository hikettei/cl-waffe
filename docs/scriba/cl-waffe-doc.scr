
@begin(section)
@title(Package :cl-waffe)
@begin(section)
@title(Tensors)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#WaffeTensor"](WaffeTensor) 


@link[uri="./<apis--cl-waffe>.html#const"](const) 


@link[uri="./<apis--cl-waffe>.html#tensor"](tensor) 


@link[uri="./<apis--cl-waffe>.html#sysconst"](sysconst) 


@link[uri="./<apis--cl-waffe>.html#parameter"](parameter) 


@link[uri="./<apis--cl-waffe>.html#data"](data) 


@link[uri="./<apis--cl-waffe>.html#value"](value) 


@link[uri="./<apis--cl-waffe>.html#grad"](grad) 


@link[uri="./<apis--cl-waffe>.html#backward"](backward) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Gradients)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#with-no-grad"](with-no-grad) 


@link[uri="./<apis--cl-waffe>.html#*no-grad*"](*no-grad*) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Four Arithmetic Operations)


@begin(deflist)
@def(Element wise operations)
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!add"](!add) Adds the given tensors element by element.


@link[uri="./<apis--cl-waffe>.html#!sub"](!sub) Substracts the given tensors element by element.


@link[uri="./<apis--cl-waffe>.html#!mul"](!mul) Multiply the given tensors element by element.


@link[uri="./<apis--cl-waffe>.html#!div"](!div) Divides the given tensors element by element.



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Summarize)


@begin(deflist)
@def(Get a scalar value from a matrix)
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!sum"](!sum) 


@link[uri="./<apis--cl-waffe>.html#!mean"](!mean) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Multiplying matrices)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!dot"](!dot) 


@link[uri="./<apis--cl-waffe>.html#!matmul"](!matmul) 


@link[uri="./<apis--cl-waffe>.html#!einsum"](!einsum) ⚠️ It is unavailable.



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Trigonometric Functions)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!sin"](!sin) 


@link[uri="./<apis--cl-waffe>.html#!cos"](!cos) 


@link[uri="./<apis--cl-waffe>.html#!tan"](!tan) 


@link[uri="./<apis--cl-waffe>.html#!asin"](!asin) 


@link[uri="./<apis--cl-waffe>.html#!acos"](!acos) 


@link[uri="./<apis--cl-waffe>.html#!atan"](!atan) 


@link[uri="./<apis--cl-waffe>.html#!sinh"](!sinh) 


@link[uri="./<apis--cl-waffe>.html#!cosh"](!cosh) 


@link[uri="./<apis--cl-waffe>.html#!tanh"](!tanh) 


@link[uri="./<apis--cl-waffe>.html#!asinh"](!asinh) 


@link[uri="./<apis--cl-waffe>.html#!acosh"](!acosh) 


@link[uri="./<apis--cl-waffe>.html#!atanh"](!atanh) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Mathematical Functions)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!abs"](!abs) 


@link[uri="./<apis--cl-waffe>.html#!log"](!log) 


@link[uri="./<apis--cl-waffe>.html#!exp"](!exp) 


@link[uri="./<apis--cl-waffe>.html#!pow"](!pow) 


@link[uri="./<apis--cl-waffe>.html#!sqrt"](!sqrt) 


@link[uri="./<apis--cl-waffe>.html#!argmax"](!argmax) 


@link[uri="./<apis--cl-waffe>.html#!argmin"](!argmin) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Reshaping)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!squeeze"](!squeeze) 


@link[uri="./<apis--cl-waffe>.html#!unsqueeze"](!unsqueeze) 


@link[uri="./<apis--cl-waffe>.html#!reshape"](!reshape) 


@link[uri="./<apis--cl-waffe>.html#!repeats"](!repeats) 


@link[uri="./<apis--cl-waffe>.html#!flatten"](!flatten) 


@link[uri="./<apis--cl-waffe>.html#!transpose"](!transpose) Often used with !matmul


@link[uri="./<apis--cl-waffe>.html#!transpose1"](!transpose1) Forced to transpose.



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Shaping)


@begin(deflist)
@def(Accessing the shape)
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!shape"](!shape) 


@link[uri="./<apis--cl-waffe>.html#!dims"](!dims) 


@link[uri="./<apis--cl-waffe>.html#!size"](!size) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Concatenate and Split)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!concatenate"](!concatenate) 


@link[uri="./<apis--cl-waffe>.html#!stack"](!stack) 


@link[uri="./<apis--cl-waffe>.html#!split"](!split) 


@link[uri="./<apis--cl-waffe>.html#!vstack"](!vstack) 


@link[uri="./<apis--cl-waffe>.html#!hstack"](!hstack) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Iterations and Making Copy)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!aref"](!aref) it behaves as if aref, but works like numpy


@link[uri="./<apis--cl-waffe>.html#!displace"](!displace) TODO


@link[uri="./<apis--cl-waffe>.html#!set-batch"](!set-batch) displace the tensor


@link[uri="./<apis--cl-waffe>.html#!where"](!where) 


@link[uri="./<apis--cl-waffe>.html#!index"](!index) 


@link[uri="./<apis--cl-waffe>.html#!filter"](!filter) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Sampling Distributions)


@begin(deflist)
@def(Initializes the tensor of the given dim with specified algorithms.)
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!normal"](!normal) Sampling the standard distribution


@link[uri="./<apis--cl-waffe>.html#!randn"](!randn) 


@link[uri="./<apis--cl-waffe>.html#!uniform-random"](!uniform-random) Sampling the uniform random


@link[uri="./<apis--cl-waffe>.html#!beta"](!beta) Sampling the beta distribution


@link[uri="./<apis--cl-waffe>.html#!gamma"](!gamma) Sampling the gamma distribution


@link[uri="./<apis--cl-waffe>.html#!chisquare"](!chisquare) Sampling the chisquare distribution


@link[uri="./<apis--cl-waffe>.html#!bernoulli"](!bernoulli) Sampling the bernoulli distribution


@link[uri="./<apis--cl-waffe>.html#!binomial"](!binomial) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Initializes the tensor)


@begin(deflist)
@def(Tensors with the same elements.)
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!zeros"](!zeros) 


@link[uri="./<apis--cl-waffe>.html#!ones"](!ones) 


@link[uri="./<apis--cl-waffe>.html#!fill"](!fill) Fill up a tensor with specified value


@link[uri="./<apis--cl-waffe>.html#!zeros-like"](!zeros-like) Returns a tensor with the same dimension as the given dimension but elements are zero.


@link[uri="./<apis--cl-waffe>.html#!ones-like"](!ones-like) 


@link[uri="./<apis--cl-waffe>.html#!full-like"](!full-like) 


@link[uri="./<apis--cl-waffe>.html#!arange"](!arange) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Activations)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!tanh"](!tanh) 


@link[uri="./<apis--cl-waffe>.html#!sigmoid"](!sigmoid) 


@link[uri="./<apis--cl-waffe>.html#!relu"](!relu) 


@link[uri="./<apis--cl-waffe>.html#!gelu"](!gelu) Not Tested


@link[uri="./<apis--cl-waffe>.html#!leakey-relu"](!leakey-relu) Not Tested


@link[uri="./<apis--cl-waffe>.html#!swish"](!swish) Not Tested


@link[uri="./<apis--cl-waffe>.html#!mish"](!mish) TODO


@link[uri="./<apis--cl-waffe>.html#!softmax"](!softmax) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Logging)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#with-verbose"](with-verbose) Displays Computation Node



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Dtype)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#with-dtype"](with-dtype) 


@link[uri="./<apis--cl-waffe>.html#dtypecase"](dtypecase) 


@link[uri="./<apis--cl-waffe>.html#define-with-typevar"](define-with-typevar) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Extensions)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#with-backend"](with-backend) 


@link[uri="./<apis--cl-waffe>.html#define-node-extension"](define-node-extension) 


@link[uri="./<apis--cl-waffe>.html#*restart-non-exist-backend*"](*restart-non-exist-backend*) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Destructive Operations)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#!allow-destruct"](!allow-destruct) 


@link[uri="./<apis--cl-waffe>.html#!disallow-destruct"](!disallow-destruct) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Objects)


@begin(deflist)
@def(defmodel/defnode/defoptimizer)
@begin(term)

@link[uri="./<apis--cl-waffe>.html#defnode"](defnode) 


@link[uri="./<apis--cl-waffe>.html#defmodel"](defmodel) 


@link[uri="./<apis--cl-waffe>.html#defoptimizer"](defoptimizer) 


@link[uri="./<apis--cl-waffe>.html#call"](call) 


@link[uri="./<apis--cl-waffe>.html#call-backward"](call-backward) 


@link[uri="./<apis--cl-waffe>.html#self"](self) 


@link[uri="./<apis--cl-waffe>.html#save-for-backward"](save-for-backward) 


@link[uri="./<apis--cl-waffe>.html#get-forward-caller"](get-forward-caller) 


@link[uri="./<apis--cl-waffe>.html#get-backward-caller"](get-backward-caller) 


@link[uri="./<apis--cl-waffe>.html#with-calling-layers"](with-calling-layers) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Trainer)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#deftrainer"](deftrainer) 


@link[uri="./<apis--cl-waffe>.html#step-model"](step-model) 


@link[uri="./<apis--cl-waffe>.html#predict"](predict) 


@link[uri="./<apis--cl-waffe>.html#update"](update) 


@link[uri="./<apis--cl-waffe>.html#zero-grad"](zero-grad) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Dataset)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#defdataset"](defdataset) 


@link[uri="./<apis--cl-waffe>.html#get-dataset"](get-dataset) 


@link[uri="./<apis--cl-waffe>.html#get-dataset-length"](get-dataset-length) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Model List)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#mlist"](mlist) 


@link[uri="./<apis--cl-waffe>.html#model-list"](model-list) 


@link[uri="./<apis--cl-waffe>.html#mlist"](mlist) 



@end(term)
@end(deflist)

@end(section)
@begin(section)
@title(Printing)


@begin(deflist)
@def()
@begin(term)

@link[uri="./<apis--cl-waffe>.html#print-model"](print-model) 


@link[uri="./<apis--cl-waffe>.html#*print-char-max-size*"](*print-char-max-size*) 


@link[uri="./<apis--cl-waffe>.html#*print-arr-max-size*"](*print-arr-max-size*) 


@link[uri="./<apis--cl-waffe>.html#*print-mat-max-size*"](*print-mat-max-size*) 


@link[uri="./<apis--cl-waffe>.html#*ignore-inlining-info*"](*ignore-inlining-info*) 



@end(term)
@end(deflist)

@end(section)
@end(section)