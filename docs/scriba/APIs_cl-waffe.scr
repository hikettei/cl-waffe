
@begin(section)
@title(<APIs: cl-waffe>)
@begin(section)
@title(!normal)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !normal)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!normal `(10 10)) :mean 2.0 :stddev 1.0
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((0.560... 1.909... ~ 3.131... 1.479...)        
                 ...
        (3.386... 4.760... ~ -0.39... 1.177...)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!randn)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !randn)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!randn `(10 10))
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((-0.34... 0.973... ~ 1.512... 2.565...)        
                 ...
        (-1.73... -0.50... ~ -0.79... -0.83...)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!uniform-random)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !uniform-random)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!uniform-random `(10 10) :limit 2.0)
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((0.588... 1.448... ~ 0.027... 1.316...)        
                 ...
        (0.903... 1.833... ~ 0.058... 1.664...)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!beta)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !beta)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!beta `(10 10) 5.0 1.0)
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((0.862... 0.955... ~ 0.816... 0.525...)        
                 ...
        (0.890... 0.882... ~ 0.686... 0.921...)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!gamma)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !gamma)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!gamma `(10 10) 1.0)
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((0.803... 1.242... ~ 0.223... 0.120...)        
                 ...
        (1.111... 0.167... ~ 0.174... 0.119...)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!chisquare)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !chisquare)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!chisquare `(10 10) 2.0)
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((3.442... 2.194... ~ 1.352... 0.542...)        
                 ...
        (2.189... 0.451... ~ 1.958... 5.944...)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!bernoulli)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !bernoulli)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!bernoulli `(10 10) 0.5)
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((0.0 0.0 ~ 1.0 1.0)        
                 ...
        (1.0 1.0 ~ 1.0 1.0)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!binomial)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !binomial)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!binomial `(10 10) 0.5)
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((1.0 0.0 ~ 1.0 1.0)        
                 ...
        (0.0 0.0 ~ 1.0 1.0)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!random-with)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !random-with)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!random-with '(10 10) #'(lambda (n) n))
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((0.0 1.0 ~ 8.0 9.0)        
                 ...
        (90.0 91.0 ~ 98.0 99.0)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!random)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !random)
)



@b(REPL:)
@begin[lang=lisp](code)
CL-WAFFE> (!random `(10 10) 1.0)
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((0.294... 0.931... ~ 0.164... 0.118...)        
                 ...
        (0.596... 0.563... ~ 0.919... 0.379...)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@begin[lang=lisp](code)
CL-WAFFE> (!random `(10 10) 3)
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((0.0 2.0 ~ 2.0 0.0)        
                 ...
        (2.0 2.0 ~ 2.0 1.0)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@begin[lang=lisp](code)
CL-WAFFE> (!random `(10 10) `(1.0 2.0))
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((1.212... 1.374... ~ 1.474... 1.948...)        
                 ...
        (1.538... 1.126... ~ 1.581... 1.101...)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@begin[lang=lisp](code)
CL-WAFFE> (!random `(10 10) `(1 5))
@end[lang=lisp](code)

@begin[lang=lisp](code)
#Const(((2.0 2.0 ~ 3.0 1.0)        
                 ...
        (4.0 4.0 ~ 1.0 1.0)) :dtype :float :shape (10 10) :backward NIL)
@end[lang=lisp](code)

@end(section)
@begin(section)
@title(!zeros-like)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !zeros-like)
)

@end(section)
@begin(section)
@title(!ones-like)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !ones-like)
)

@end(section)
@begin(section)
@title(!full-like)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !full-like)
)

@end(section)
@begin(section)
@title(!zeros)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !zeros)
)

@end(section)
@begin(section)
@title(!ones)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !ones)
)

@end(section)
@begin(section)
@title(!fill)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !fill)
)

@end(section)
@begin(section)
@title(!shape)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !shape)
)

@end(section)
@begin(section)
@title(!dims)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !dims)
)

@end(section)
@begin(section)
@title(!size)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !size)
)

@end(section)
@begin(section)
@title(WaffeTensor)

@cl:with-package[name="cl-waffe"](
@cl:doc(struct WaffeTensor)
)

@end(section)
@begin(section)
@title(parameter)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro parameter)
)

@end(section)
@begin(section)
@title(data)

@cl:with-package[name="cl-waffe"](
@cl:doc(function data)
)

@end(section)
@begin(section)
@title(value)

@cl:with-package[name="cl-waffe"](
@cl:doc(function value)
)

@end(section)
@begin(section)
@title(backward)

@cl:with-package[name="cl-waffe"](
@cl:doc(function backward)
)

@end(section)
@begin(section)
@title(with-no-grad)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro with-no-grad)
)

@end(section)
@begin(section)
@title(*no-grad*)

@cl:with-package[name="cl-waffe"](
@cl:doc(variable *no-grad*)
)

@end(section)
@begin(section)
@title(!add)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !add)
)

@end(section)
@begin(section)
@title(!!add)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !!add)
)

@end(section)
@begin(section)
@title(!sub)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !sub)
)

@end(section)
@begin(section)
@title(!!sub)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !!sub)
)

@end(section)
@begin(section)
@title(!mul)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !mul)
)

@end(section)
@begin(section)
@title(!!mul)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !!mul)
)

@end(section)
@begin(section)
@title(!div)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !div)
)

@end(section)
@begin(section)
@title(!sum)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !sum)
)

@end(section)
@begin(section)
@title(!mean)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !mean)
)

@end(section)
@begin(section)
@title(!dot)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !dot)
)

@end(section)
@begin(section)
@title(!matmul)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !matmul)
)

@end(section)
@begin(section)
@title(!sin)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !sin)
)

@end(section)
@begin(section)
@title(!cos)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !cos)
)

@end(section)
@begin(section)
@title(!tan)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !tan)
)

@end(section)
@begin(section)
@title(!asin)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !asin)
)

@end(section)
@begin(section)
@title(!acos)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !acos)
)

@end(section)
@begin(section)
@title(!atan)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !atan)
)

@end(section)
@begin(section)
@title(!sinh)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !sinh)
)

@end(section)
@begin(section)
@title(!cosh)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !cosh)
)

@end(section)
@begin(section)
@title(!tanh)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !tanh)
)

@end(section)
@begin(section)
@title(!asinh)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !asinh)
)

@end(section)
@begin(section)
@title(!acosh)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !acosh)
)

@end(section)
@begin(section)
@title(!atanh)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !atanh)
)

@end(section)
@begin(section)
@title(!abs)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !abs)
)

@end(section)
@begin(section)
@title(!log)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !log)
)

@end(section)
@begin(section)
@title(!exp)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !exp)
)

@end(section)
@begin(section)
@title(!pow)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !pow)
)

@end(section)
@begin(section)
@title(!sqrt)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !sqrt)
)

@end(section)
@begin(section)
@title(!argmax)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !argmax)
)

@end(section)
@begin(section)
@title(!argmin)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !argmin)
)

@end(section)
@begin(section)
@title(!squeeze)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !squeeze)
)

@end(section)
@begin(section)
@title(!unsqueeze)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !unsqueeze)
)

@end(section)
@begin(section)
@title(!reshape)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !reshape)
)

@end(section)
@begin(section)
@title(!repeats)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !repeats)
)

@end(section)
@begin(section)
@title(!flatten)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !flatten)
)

@end(section)
@begin(section)
@title(!transpose)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !transpose)
)

@end(section)
@begin(section)
@title(!transpose1)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !transpose1)
)

@end(section)
@begin(section)
@title(!concatenate)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !concatenate)
)

@end(section)
@begin(section)
@title(!stack)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !stack)
)

@end(section)
@begin(section)
@title(!split)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !split)
)

@end(section)
@begin(section)
@title(!hstack)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro !hstack)
)

@end(section)
@begin(section)
@title(!vstack)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro !vstack)
)

@end(section)
@begin(section)
@title(!aref)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !aref)
)

@end(section)
@begin(section)
@title(!where)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !where)
)

@end(section)
@begin(section)
@title(!index)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !index)
)

@end(section)
@begin(section)
@title(!filter)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !filter)
)

@end(section)
@begin(section)
@title(!arange)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro !arange)
)

@end(section)
@begin(section)
@title(!relu)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !relu)
)

@end(section)
@begin(section)
@title(!sigmoid)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !sigmoid)
)

@end(section)
@begin(section)
@title(!gelu)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !gelu)
)

@end(section)
@begin(section)
@title(!leakey-relu)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !leakey-relu)
)

@end(section)
@begin(section)
@title(!swish)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !swish)
)

@end(section)
@begin(section)
@title(!softmax)

@cl:with-package[name="cl-waffe"](
@cl:doc(function !softmax)
)

@end(section)
@begin(section)
@title(with-verbose)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro with-verbose)
)

@end(section)
@begin(section)
@title(with-dtype)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro with-dtype)
)

@end(section)
@begin(section)
@title(dtypecase)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro dtypecase)
)

@end(section)
@begin(section)
@title(define-with-typevar)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro define-with-typevar)
)

@end(section)
@begin(section)
@title(with-backend)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro with-backend)
)

@end(section)
@begin(section)
@title(define-node-extension)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro define-node-extension)
)

@end(section)
@begin(section)
@title(*restart-non-exist-backend*)

@cl:with-package[name="cl-waffe"](
@cl:doc(variable *restart-non-exist-backend*)
)

@end(section)
@begin(section)
@title(!allow-destruct)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro !allow-destruct)
)

@end(section)
@begin(section)
@title(!disallow-destruct)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro !disallow-destruct)
)

@end(section)
@begin(section)
@title(defnode)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro defnode)
)

@end(section)
@begin(section)
@title(defmodel)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro defmodel)
)

@end(section)
@begin(section)
@title(defoptimizer)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro defoptimizer)
)

@end(section)
@begin(section)
@title(call)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro call)
)

@end(section)
@begin(section)
@title(call-backward)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro call-backward)
)

@end(section)
@begin(section)
@title(self)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro self)
)

@end(section)
@begin(section)
@title(save-for-backward)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro save-for-backward)
)

@end(section)
@begin(section)
@title(get-forward-caller)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro get-forward-caller)
)

@end(section)
@begin(section)
@title(get-backward-caller)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro get-backward-caller)
)

@end(section)
@begin(section)
@title(with-calling-layers)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro with-calling-layers)
)

@end(section)
@begin(section)
@title(deftrainer)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro deftrainer)
)

@end(section)
@begin(section)
@title(step-model)

@cl:with-package[name="cl-waffe"](
@cl:doc(function step-model)
)

@end(section)
@begin(section)
@title(predict)

@cl:with-package[name="cl-waffe"](
@cl:doc(function predict)
)

@end(section)
@begin(section)
@title(model)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro model)
)

@end(section)
@begin(section)
@title(update)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro update)
)

@end(section)
@begin(section)
@title(zero-grad)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro zero-grad)
)

@end(section)
@begin(section)
@title(defdataset)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro defdataset)
)

@end(section)
@begin(section)
@title(get-dataset)

@cl:with-package[name="cl-waffe"](
@cl:doc(function get-dataset)
)

@end(section)
@begin(section)
@title(get-dataset-length)

@cl:with-package[name="cl-waffe"](
@cl:doc(function get-dataset-length)
)

@end(section)
@begin(section)
@title(model-list)

@cl:with-package[name="cl-waffe"](
@cl:doc(function model-list)
)

@end(section)
@begin(section)
@title(mlist)

@cl:with-package[name="cl-waffe"](
@cl:doc(function mlist)
)

@end(section)
@begin(section)
@title(mth)

@cl:with-package[name="cl-waffe"](
@cl:doc(function mth)
)

@end(section)
@begin(section)
@title(grad)

@cl:with-package[name="cl-waffe"](
@cl:doc(macro grad)
)

@end(section)
@end(section)